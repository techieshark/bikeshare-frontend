!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=52)}([function(e,t,n){"use strict";function r(e,t,n){void 0===n&&(n={});var r={type:"Feature"};return(0===n.id||n.id)&&(r.id=n.id),n.bbox&&(r.bbox=n.bbox),r.properties=t||{},r.geometry=e,r}function o(e,t,n){return void 0===n&&(n={}),r({type:"Point",coordinates:e},t,n)}function i(e,t,n){void 0===n&&(n={});for(var o=0,i=e;o<i.length;o++){var a=i[o];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<a[a.length-1].length;s++)if(a[a.length-1][s]!==a[0][s])throw new Error("First and last Position are not equivalent.")}return r({type:"Polygon",coordinates:e},t,n)}function a(e,t,n){if(void 0===n&&(n={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return r({type:"LineString",coordinates:e},t,n)}function s(e,t){void 0===t&&(t={});var n={type:"FeatureCollection"};return t.id&&(n.id=t.id),t.bbox&&(n.bbox=t.bbox),n.features=e,n}function u(e,t,n){return void 0===n&&(n={}),r({type:"MultiLineString",coordinates:e},t,n)}function c(e,t,n){return void 0===n&&(n={}),r({type:"MultiPoint",coordinates:e},t,n)}function l(e,t,n){return void 0===n&&(n={}),r({type:"MultiPolygon",coordinates:e},t,n)}function d(e,n){void 0===n&&(n="kilometers");var r=t.factors[n];if(!r)throw new Error(n+" units is invalid");return e*r}function f(e,n){void 0===n&&(n="kilometers");var r=t.factors[n];if(!r)throw new Error(n+" units is invalid");return e/r}function p(e){return 180*(e%(2*Math.PI))/Math.PI}function h(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)&&!/^\s*$/.test(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.earthRadius=6371008.8,t.factors={centimeters:100*t.earthRadius,centimetres:100*t.earthRadius,degrees:t.earthRadius/111325,feet:3.28084*t.earthRadius,inches:39.37*t.earthRadius,kilometers:t.earthRadius/1e3,kilometres:t.earthRadius/1e3,meters:t.earthRadius,metres:t.earthRadius,miles:t.earthRadius/1609.344,millimeters:1e3*t.earthRadius,millimetres:1e3*t.earthRadius,nauticalmiles:t.earthRadius/1852,radians:1,yards:t.earthRadius/1.0936},t.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/t.earthRadius,yards:1/1.0936},t.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046},t.feature=r,t.geometry=function(e,t,n){switch(void 0===n&&(n={}),e){case"Point":return o(t).geometry;case"LineString":return a(t).geometry;case"Polygon":return i(t).geometry;case"MultiPoint":return c(t).geometry;case"MultiLineString":return u(t).geometry;case"MultiPolygon":return l(t).geometry;default:throw new Error(e+" is invalid")}},t.point=o,t.points=function(e,t,n){return void 0===n&&(n={}),s(e.map((function(e){return o(e,t)})),n)},t.polygon=i,t.polygons=function(e,t,n){return void 0===n&&(n={}),s(e.map((function(e){return i(e,t)})),n)},t.lineString=a,t.lineStrings=function(e,t,n){return void 0===n&&(n={}),s(e.map((function(e){return a(e,t)})),n)},t.featureCollection=s,t.multiLineString=u,t.multiPoint=c,t.multiPolygon=l,t.geometryCollection=function(e,t,n){return void 0===n&&(n={}),r({type:"GeometryCollection",geometries:e},t,n)},t.round=function(e,t){if(void 0===t&&(t=0),t&&!(t>=0))throw new Error("precision must be a positive number");var n=Math.pow(10,t||0);return Math.round(e*n)/n},t.radiansToLength=d,t.lengthToRadians=f,t.lengthToDegrees=function(e,t){return p(f(e,t))},t.bearingToAzimuth=function(e){var t=e%360;return t<0&&(t+=360),t},t.radiansToDegrees=p,t.degreesToRadians=function(e){return e%360*Math.PI/180},t.convertLength=function(e,t,n){if(void 0===t&&(t="kilometers"),void 0===n&&(n="kilometers"),!(e>=0))throw new Error("length must be a positive number");return d(f(e,t),n)},t.convertArea=function(e,n,r){if(void 0===n&&(n="meters"),void 0===r&&(r="kilometers"),!(e>=0))throw new Error("area must be a positive number");var o=t.areaFactors[n];if(!o)throw new Error("invalid original units");var i=t.areaFactors[r];if(!i)throw new Error("invalid final units");return e/o*i},t.isNumber=h,t.isObject=function(e){return!!e&&e.constructor===Object},t.validateBBox=function(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!h(e))throw new Error("bbox must only contain numbers")}))},t.validateId=function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")},t.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},t.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},t.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},t.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},t.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},t.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},t.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}},function(e,t){e.exports=function(){for(var e={},t=0;t<arguments.length;t++){var r=arguments[t];for(var o in r)n.call(r,o)&&(e[o]=r[o])}return e};var n=Object.prototype.hasOwnProperty},function(e,t,n){"use strict";e.exports={API_ORIGIN:"https://api.mapbox.com",EVENT_PROGRESS_DOWNLOAD:"downloadProgress",EVENT_PROGRESS_UPLOAD:"uploadProgress",EVENT_ERROR:"error",EVENT_RESPONSE:"response",ERROR_HTTP:"HttpError",ERROR_REQUEST_ABORTED:"RequestAbortedError"}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(u," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,s,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(var a=0;a<e.length;a++){var s=e[a];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="(".concat(s[2],") and (").concat(n,")")),t.push(s))}},t}},function(e,t,n){"use strict";var r,o={},i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function s(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function u(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id],a=0;if(i){for(i.refs++;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(g(r.parts[a],t))}else{for(var s=[];a<r.parts.length;a++)s.push(g(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function c(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var l,d=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o&&e.setAttribute("media",o),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function g(e,t){var n,r,o;if(t.singleton){var i=m++;n=h||(h=c(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=c(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=s(e,t);return u(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var a=n[i],c=o[a.id];c&&(c.refs--,r.push(c))}e&&u(s(e,t),t);for(var l=0;l<r.length;l++){var d=r[l];if(0===d.refs){for(var f=0;f<d.parts.length;f++)d.parts[f]();delete o[d.id]}}}}},function(e,t,n){"use strict";(function(t){var r=n(1),o=n(37);e.exports=r(o,{file:function(e){if("undefined"!=typeof window){if(e instanceof t.Blob||e instanceof t.ArrayBuffer)return;return"Blob or ArrayBuffer"}if("string"!=typeof e&&void 0===e.pipe)return"Filename or Readable stream"},date:function(e){if("boolean"==typeof e)return"date";try{var t=new Date(e);if(t.getTime&&isNaN(t.getTime()))return"date"}catch(e){return"date"}},coordinates:function(e){return o.tuple(o.number,o.number)(e)},assertShape:function(e,t){return o.assert(o.strictShape(e),t)}})}).call(this,n(6))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(8),o=n(44);e.exports=function(e){return function(t){var n;n=r.prototype.isPrototypeOf(t)?t:o(t);var i=Object.create(e);return i.client=n,i}}},function(e,t,n){"use strict";var r=n(9),o=n(41),i=n(2);function a(e){if(!e||!e.accessToken)throw new Error("Cannot create a client without an access token");r(e.accessToken),this.accessToken=e.accessToken,this.origin=e.origin||i.API_ORIGIN}a.prototype.createRequest=function(e){return new o(this,e)},e.exports=a},function(e,t,n){"use strict";var r=n(39),o={};function i(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e){if(o[e])return o[e];var t=e.split("."),n=t[0],a=t[1];if(!a)throw new Error("Invalid token");var s=function(e){try{return JSON.parse(r.decode(e))}catch(e){throw new Error("Invalid token")}}(a),u={usage:n,user:s.u};return i(s,"a")&&(u.authorization=s.a),i(s,"exp")&&(u.expires=1e3*s.exp),i(s,"iat")&&(u.created=1e3*s.iat),i(s,"scopes")&&(u.scopes=s.scopes),i(s,"client")&&(u.client=s.client),i(s,"ll")&&(u.lastLogin=s.ll),i(s,"iu")&&(u.impersonator=s.iu),o[e]=u,u}},function(e,t,n){"use strict";e.exports=function(e,t){var n=function(e,n){return-1!==t.indexOf(e)&&void 0!==n};return"function"==typeof t&&(n=t),Object.keys(e).filter((function(t){return n(t,e[t])})).reduce((function(t,n){return t[n]=e[n],t}),{})}},function(e,t,n){"use strict";var r=n(51);e.exports=function(e){return r(e,(function(e,t){return"boolean"==typeof t?JSON.stringify(t):t}))}},function(e,t,n){var r,o,i;function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*! nouislider - 10.0.0 - 2017-05-28 14:52:48 */o=[],void 0===(i="function"==typeof(r=function(){"use strict";var e="10.0.0";function t(e){e.preventDefault()}function n(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}function r(e,t,n){n>0&&(s(e,t),setTimeout((function(){u(e,t)}),n))}function o(e){return Array.isArray(e)?e:[e]}function i(e){var t=(e=String(e)).split(".");return t.length>1?t[1].length:0}function s(e,t){e.classList?e.classList.add(t):e.className+=" "+t}function u(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}function c(e){var t=void 0!==window.pageXOffset,n="CSS1Compat"===(e.compatMode||"");return{x:t?window.pageXOffset:n?e.documentElement.scrollLeft:e.body.scrollLeft,y:t?window.pageYOffset:n?e.documentElement.scrollTop:e.body.scrollTop}}function l(e,t){return 100/(t-e)}function d(e,t){return 100*t/(e[1]-e[0])}function f(e,t){for(var n=1;e>=t[n];)n+=1;return n}function p(e,t,n){if(n>=e.slice(-1)[0])return 100;var r,o,i,a,s=f(n,e);return r=e[s-1],o=e[s],i=t[s-1],a=t[s],i+function(e,t){return d(e,e[0]<0?t+Math.abs(e[0]):t-e[0])}([r,o],n)/l(i,a)}function h(e,t,n,r){if(100===r)return r;var o,i,a=f(r,e);return n?r-(o=e[a-1])>((i=e[a])-o)/2?i:o:t[a-1]?e[a-1]+function(e,t){return Math.round(e/t)*t}(r-e[a-1],t[a-1]):r}function m(t,r,o){var i;if("number"==typeof r&&(r=[r]),"[object Array]"!==Object.prototype.toString.call(r))throw new Error("noUiSlider ("+e+"): 'range' contains invalid value.");if(!n(i="min"===t?0:"max"===t?100:parseFloat(t))||!n(r[0]))throw new Error("noUiSlider ("+e+"): 'range' value isn't numeric.");o.xPct.push(i),o.xVal.push(r[0]),i?o.xSteps.push(!isNaN(r[1])&&r[1]):isNaN(r[1])||(o.xSteps[0]=r[1]),o.xHighestCompleteStep.push(0)}function g(e,t,n){if(!t)return!0;n.xSteps[e]=d([n.xVal[e],n.xVal[e+1]],t)/l(n.xPct[e],n.xPct[e+1]);var r=(n.xVal[e+1]-n.xVal[e])/n.xNumSteps[e],o=Math.ceil(Number(r.toFixed(3))-1),i=n.xVal[e]+n.xNumSteps[e]*o;n.xHighestCompleteStep[e]=i}function v(e,t,n){this.xPct=[],this.xVal=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=t;var r,o=[];for(r in e)e.hasOwnProperty(r)&&o.push([e[r],r]);for(o.length&&"object"===a(o[0][0])?o.sort((function(e,t){return e[0][0]-t[0][0]})):o.sort((function(e,t){return e[0]-t[0]})),r=0;r<o.length;r++)m(o[r][1],o[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)g(r,this.xNumSteps[r],this)}v.prototype.getMargin=function(t){var n=this.xNumSteps[0];if(n&&t/n%1!=0)throw new Error("noUiSlider ("+e+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&d(this.xVal,t)},v.prototype.toStepping=function(e){return e=p(this.xVal,this.xPct,e)},v.prototype.fromStepping=function(e){return function(e,t,n){if(n>=100)return e.slice(-1)[0];var r,o=f(n,t);return function(e,t){return t*(e[1]-e[0])/100+e[0]}([e[o-1],e[o]],(n-(r=t[o-1]))*l(r,t[o]))}(this.xVal,this.xPct,e)},v.prototype.getStep=function(e){return e=h(this.xPct,this.xSteps,this.snap,e)},v.prototype.getNearbySteps=function(e){var t=f(e,this.xPct);return{stepBefore:{startValue:this.xVal[t-2],step:this.xNumSteps[t-2],highestStep:this.xHighestCompleteStep[t-2]},thisStep:{startValue:this.xVal[t-1],step:this.xNumSteps[t-1],highestStep:this.xHighestCompleteStep[t-1]},stepAfter:{startValue:this.xVal[t-0],step:this.xNumSteps[t-0],highestStep:this.xHighestCompleteStep[t-0]}}},v.prototype.countStepDecimals=function(){var e=this.xNumSteps.map(i);return Math.max.apply(null,e)},v.prototype.convert=function(e){return this.getStep(this.toStepping(e))};var b={to:function(e){return void 0!==e&&e.toFixed(2)},from:Number};function y(t){if(function(e){return"object"===a(e)&&"function"==typeof e.to&&"function"==typeof e.from}(t))return!0;throw new Error("noUiSlider ("+e+"): 'format' requires 'to' and 'from' methods.")}function w(t,r){if(!n(r))throw new Error("noUiSlider ("+e+"): 'step' is not numeric.");t.singleStep=r}function x(t,n){if("object"!==a(n)||Array.isArray(n))throw new Error("noUiSlider ("+e+"): 'range' is not an object.");if(void 0===n.min||void 0===n.max)throw new Error("noUiSlider ("+e+"): Missing 'min' or 'max' in 'range'.");if(n.min===n.max)throw new Error("noUiSlider ("+e+"): 'range' 'min' and 'max' cannot be equal.");t.spectrum=new v(n,t.snap,t.singleStep)}function E(t,n){if(n=o(n),!Array.isArray(n)||!n.length)throw new Error("noUiSlider ("+e+"): 'start' option is incorrect.");t.handles=n.length,t.start=n}function S(t,n){if(t.snap=n,"boolean"!=typeof n)throw new Error("noUiSlider ("+e+"): 'snap' option must be a boolean.")}function k(t,n){if(t.animate=n,"boolean"!=typeof n)throw new Error("noUiSlider ("+e+"): 'animate' option must be a boolean.")}function O(t,n){if(t.animationDuration=n,"number"!=typeof n)throw new Error("noUiSlider ("+e+"): 'animationDuration' option must be a number.")}function C(t,n){var r,o=[!1];if("lower"===n?n=[!0,!1]:"upper"===n&&(n=[!1,!0]),!0===n||!1===n){for(r=1;r<t.handles;r++)o.push(n);o.push(!1)}else{if(!Array.isArray(n)||!n.length||n.length!==t.handles+1)throw new Error("noUiSlider ("+e+"): 'connect' option doesn't match handle count.");o=n}t.connect=o}function A(t,n){switch(n){case"horizontal":t.ort=0;break;case"vertical":t.ort=1;break;default:throw new Error("noUiSlider ("+e+"): 'orientation' option is invalid.")}}function N(t,r){if(!n(r))throw new Error("noUiSlider ("+e+"): 'margin' option must be numeric.");if(0!==r&&(t.margin=t.spectrum.getMargin(r),!t.margin))throw new Error("noUiSlider ("+e+"): 'margin' option is only supported on linear sliders.")}function P(t,r){if(!n(r))throw new Error("noUiSlider ("+e+"): 'limit' option must be numeric.");if(t.limit=t.spectrum.getMargin(r),!t.limit||t.handles<2)throw new Error("noUiSlider ("+e+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function U(t,r){if(!n(r))throw new Error("noUiSlider ("+e+"): 'padding' option must be numeric.");if(0!==r){if(t.padding=t.spectrum.getMargin(r),!t.padding)throw new Error("noUiSlider ("+e+"): 'padding' option is only supported on linear sliders.");if(t.padding<0)throw new Error("noUiSlider ("+e+"): 'padding' option must be a positive number.");if(t.padding>=50)throw new Error("noUiSlider ("+e+"): 'padding' option must be less than half the range.")}}function j(t,n){switch(n){case"ltr":t.dir=0;break;case"rtl":t.dir=1;break;default:throw new Error("noUiSlider ("+e+"): 'direction' option was not recognized.")}}function T(t,n){if("string"!=typeof n)throw new Error("noUiSlider ("+e+"): 'behaviour' must be a string containing options.");var r=n.indexOf("tap")>=0,o=n.indexOf("drag")>=0,i=n.indexOf("fixed")>=0,a=n.indexOf("snap")>=0,s=n.indexOf("hover")>=0;if(i){if(2!==t.handles)throw new Error("noUiSlider ("+e+"): 'fixed' behaviour must be used with 2 handles");N(t,t.start[1]-t.start[0])}t.events={tap:r||a,drag:o,fixed:i,snap:a,hover:s}}function R(t,n){if(!1!==n)if(!0===n){t.tooltips=[];for(var r=0;r<t.handles;r++)t.tooltips.push(!0)}else{if(t.tooltips=o(n),t.tooltips.length!==t.handles)throw new Error("noUiSlider ("+e+"): must pass a formatter for all handles.");t.tooltips.forEach((function(t){if("boolean"!=typeof t&&("object"!==a(t)||"function"!=typeof t.to))throw new Error("noUiSlider ("+e+"): 'tooltips' must be passed a formatter or 'false'.")}))}}function q(e,t){e.ariaFormat=t,y(t)}function L(e,t){e.format=t,y(t)}function M(t,n){if(void 0!==n&&"string"!=typeof n&&!1!==n)throw new Error("noUiSlider ("+e+"): 'cssPrefix' must be a string or `false`.");t.cssPrefix=n}function F(t,n){if(void 0!==n&&"object"!==a(n))throw new Error("noUiSlider ("+e+"): 'cssClasses' must be an object.");if("string"==typeof t.cssPrefix)for(var r in t.cssClasses={},n)n.hasOwnProperty(r)&&(t.cssClasses[r]=t.cssPrefix+n[r]);else t.cssClasses=n}function _(t,n){if(!0!==n&&!1!==n)throw new Error("noUiSlider ("+e+"): 'useRequestAnimationFrame' option should be true (default) or false.");t.useRequestAnimationFrame=n}function D(t){var n={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:b,format:b},r={step:{r:!1,t:w},start:{r:!0,t:E},connect:{r:!0,t:C},direction:{r:!0,t:j},snap:{r:!1,t:S},animate:{r:!1,t:k},animationDuration:{r:!1,t:O},range:{r:!0,t:x},orientation:{r:!1,t:A},margin:{r:!1,t:N},limit:{r:!1,t:P},padding:{r:!1,t:U},behaviour:{r:!0,t:T},ariaFormat:{r:!1,t:q},format:{r:!1,t:L},tooltips:{r:!1,t:R},cssPrefix:{r:!1,t:M},cssClasses:{r:!1,t:F},useRequestAnimationFrame:{r:!1,t:_}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},useRequestAnimationFrame:!0};t.format&&!t.ariaFormat&&(t.ariaFormat=t.format),Object.keys(r).forEach((function(i){if(void 0===t[i]&&void 0===o[i]){if(r[i].r)throw new Error("noUiSlider ("+e+"): '"+i+"' is required.");return!0}r[i].t(n,void 0===t[i]?o[i]:t[i])})),n.pips=t.pips;var i=[["left","top"],["right","bottom"]];return n.style=i[n.dir][n.ort],n.styleOposite=i[n.dir?0:1][n.ort],n}function z(n,i,a){var l,d,f,p,h,m,g,v=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},b=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("test",null,t)}catch(e){}return e}(),y=n,w=[],x=[],E=!1,S=i.spectrum,k=[],O={},C=null,A=n.ownerDocument,N=A.documentElement,P=A.body;function U(e,t){var n=A.createElement("div");return t&&s(n,t),e.appendChild(n),n}function j(e,t){var n=U(e,i.cssClasses.origin),r=U(n,i.cssClasses.handle);return r.setAttribute("data-handle",t),r.setAttribute("tabindex","0"),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===t?s(r,i.cssClasses.handleLower):t===i.handles-1&&s(r,i.cssClasses.handleUpper),n}function T(e,t){return!!t&&U(e,i.cssClasses.connect)}function R(e,t){return!!i.tooltips[t]&&U(e.firstChild,i.cssClasses.tooltip)}function q(e,t,n){var r=A.createElement("div"),o=[i.cssClasses.valueNormal,i.cssClasses.valueLarge,i.cssClasses.valueSub],a=[i.cssClasses.markerNormal,i.cssClasses.markerLarge,i.cssClasses.markerSub],u=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],c=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function l(e,t){var n=t===i.cssClasses.value,r=n?o:a;return t+" "+(n?u:c)[i.ort]+" "+r[e]}return s(r,i.cssClasses.pips),s(r,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(e).forEach((function(o){!function(e,o){o[1]=o[1]&&t?t(o[0],o[1]):o[1];var a=U(r,!1);a.className=l(o[1],i.cssClasses.marker),a.style[i.style]=e+"%",o[1]&&((a=U(r,!1)).className=l(o[1],i.cssClasses.value),a.style[i.style]=e+"%",a.innerText=n.to(o[0]))}(o,e[o])})),r}function L(){var e;h&&((e=h).parentElement.removeChild(e),h=null)}function M(t){L();var n=t.mode,r=t.density||1,o=t.filter||!1,i=function(t,n,r){if("range"===t||"steps"===t)return S.xVal;if("count"===t){if(!n)throw new Error("noUiSlider ("+e+"): 'values' required for mode 'count'.");var o,i=100/(n-1),a=0;for(n=[];(o=a++*i)<=100;)n.push(o);t="positions"}return"positions"===t?n.map((function(e){return S.fromStepping(r?S.getStep(e):e)})):"values"===t?r?n.map((function(e){return S.fromStepping(S.getStep(S.toStepping(e)))})):n:void 0}(n,t.values||!1,t.stepped||!1),a=function(e,t,n){var r,o={},i=S.xVal[0],a=S.xVal[S.xVal.length-1],s=!1,u=!1,c=0;return r=n.slice().sort((function(e,t){return e-t})),(n=r.filter((function(e){return!this[e]&&(this[e]=!0)}),{}))[0]!==i&&(n.unshift(i),s=!0),n[n.length-1]!==a&&(n.push(a),u=!0),n.forEach((function(r,i){var a,l,d,f,p,h,m,g,v,b=r,y=n[i+1];if("steps"===t&&(a=S.xNumSteps[i]),a||(a=y-b),!1!==b&&void 0!==y)for(a=Math.max(a,1e-7),l=b;l<=y;l=(l+a).toFixed(7)/1){for(m=(p=(f=S.toStepping(l))-c)/e,v=p/(g=Math.round(m)),d=1;d<=g;d+=1)o[(c+d*v).toFixed(5)]=["x",0];h=n.indexOf(l)>-1?1:"steps"===t?2:0,!i&&s&&(h=0),l===y&&u||(o[f.toFixed(5)]=[l,h]),c=f}})),o}(r,n,i),s=t.format||{to:Math.round};return h=y.appendChild(q(a,o,s))}function F(){var e=l.getBoundingClientRect(),t="offset"+["Width","Height"][i.ort];return 0===i.ort?e.width||l[t]:e.height||l[t]}function _(e,t,n,r){var o=function(t){return!y.hasAttribute("disabled")&&(o=y,a=i.cssClasses.tap,(o.classList?!o.classList.contains(a):!new RegExp("\\b"+a+"\\b").test(o.className))&&!!(t=function(e,t){var n,r,o=0===e.type.indexOf("touch"),i=0===e.type.indexOf("mouse"),a=0===e.type.indexOf("pointer");if(0===e.type.indexOf("MSPointer")&&(a=!0),o){if(e.touches.length>1)return!1;n=e.changedTouches[0].pageX,r=e.changedTouches[0].pageY}return t=t||c(A),(i||a)&&(n=e.clientX+t.x,r=e.clientY+t.y),e.pageOffset=t,e.points=[n,r],e.cursor=i||a,e}(t,r.pageOffset))&&!(e===v.start&&void 0!==t.buttons&&t.buttons>1)&&(!r.hover||!t.buttons)&&(b||t.preventDefault(),t.calcPoint=t.points[i.ort],void n(t,r)));var o,a},a=[];return e.split(" ").forEach((function(e){t.addEventListener(e,o,!!b&&{passive:!0}),a.push([e,o])})),a}function z(e){var t,n,r,o,a,s,u=100*(e-(t=l,n=i.ort,r=t.getBoundingClientRect(),o=t.ownerDocument,a=o.documentElement,s=c(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(s.x=0),n?r.top+s.y-a.clientTop:r.left+s.x-a.clientLeft))/F();return i.dir?100-u:u}function I(e,t,n,r){var o=n.slice(),i=[!e,e],a=[e,!e];r=r.slice(),e&&r.reverse(),r.length>1?r.forEach((function(e,n){var r=X(o,e,o[e]+t,i[n],a[n],!1);!1===r?t=0:(t=r-o[e],o[e]=r)})):i=a=[!0];var s=!1;r.forEach((function(e,r){s=Z(e,n[e]+t,i[r],a[r])||s})),s&&r.forEach((function(e){B("update",e),B("slide",e)}))}function B(e,t,n){Object.keys(O).forEach((function(r){var o=r.split(".")[0];e===o&&O[r].forEach((function(e){e.call(p,k.map(i.format.to),t,k.slice(),n||!1,w.slice())}))}))}function V(e,t){"mouseout"===e.type&&"HTML"===e.target.nodeName&&null===e.relatedTarget&&H(e,t)}function G(e,t){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===e.buttons&&0!==t.buttonsProperty)return H(e,t);var n=(i.dir?-1:1)*(e.calcPoint-t.startCalcPoint);I(n>0,100*n/t.baseSize,t.locations,t.handleNumbers)}function H(e,n){E&&(u(E,i.cssClasses.active),E=!1),e.cursor&&(P.style.cursor="",P.removeEventListener("selectstart",t)),C.forEach((function(e){N.removeEventListener(e[0],e[1])})),u(y,i.cssClasses.drag),Y(),n.handleNumbers.forEach((function(e){B("change",e),B("set",e),B("end",e)}))}function J(e,n){if(1===n.handleNumbers.length){var r=d[n.handleNumbers[0]];if(r.hasAttribute("disabled"))return!1;s(E=r.children[0],i.cssClasses.active)}e.stopPropagation();var o=_(v.move,N,G,{startCalcPoint:e.calcPoint,baseSize:F(),pageOffset:e.pageOffset,handleNumbers:n.handleNumbers,buttonsProperty:e.buttons,locations:w.slice()}),a=_(v.end,N,H,{handleNumbers:n.handleNumbers}),u=_("mouseout",N,V,{handleNumbers:n.handleNumbers});C=o.concat(a,u),e.cursor&&(P.style.cursor=getComputedStyle(e.target).cursor,d.length>1&&s(y,i.cssClasses.drag),P.addEventListener("selectstart",t,!1)),n.handleNumbers.forEach((function(e){B("start",e)}))}function W(e){e.stopPropagation();var t=z(e.calcPoint),n=function(e){var t=100,n=!1;return d.forEach((function(r,o){if(!r.hasAttribute("disabled")){var i=Math.abs(w[o]-e);i<t&&(n=o,t=i)}})),n}(t);if(!1===n)return!1;i.events.snap||r(y,i.cssClasses.tap,i.animationDuration),Z(n,t,!0,!0),Y(),B("slide",n,!0),B("update",n,!0),B("change",n,!0),B("set",n,!0),i.events.snap&&J(e,{handleNumbers:[n]})}function Q(e){var t=z(e.calcPoint),n=S.getStep(t),r=S.fromStepping(n);Object.keys(O).forEach((function(e){"hover"===e.split(".")[0]&&O[e].forEach((function(e){e.call(p,r)}))}))}function X(e,t,n,r,o,a){var s;return d.length>1&&(r&&t>0&&(n=Math.max(n,e[t-1]+i.margin)),o&&t<d.length-1&&(n=Math.min(n,e[t+1]-i.margin))),d.length>1&&i.limit&&(r&&t>0&&(n=Math.min(n,e[t-1]+i.limit)),o&&t<d.length-1&&(n=Math.max(n,e[t+1]-i.limit))),i.padding&&(0===t&&(n=Math.max(n,i.padding)),t===d.length-1&&(n=Math.min(n,100-i.padding))),n=S.getStep(n),s=n,!((n=Math.max(Math.min(s,100),0))===e[t]&&!a)&&n}function $(e){return e+"%"}function Y(){x.forEach((function(e){var t=w[e]>50?-1:1,n=3+(d.length+t*e);d[e].childNodes[0].style.zIndex=n}))}function Z(e,t,n,r){return!1!==(t=X(w,e,t,n,r,!1))&&(function(e,t){w[e]=t,k[e]=S.fromStepping(t);var n=function(){d[e].style[i.style]=$(t),K(e),K(e+1)};window.requestAnimationFrame&&i.useRequestAnimationFrame?window.requestAnimationFrame(n):n()}(e,t),!0)}function K(e){if(f[e]){var t=0,n=100;0!==e&&(t=w[e-1]),e!==f.length-1&&(n=w[e]),f[e].style[i.style]=$(t),f[e].style[i.styleOposite]=$(100-n)}}function ee(e,t){null!==e&&!1!==e&&("number"==typeof e&&(e=String(e)),!1===(e=i.format.from(e))||isNaN(e)||Z(t,S.toStepping(e),!1,!1))}function te(e,t){var n=o(e),a=void 0===w[0];t=void 0===t||!!t,n.forEach(ee),i.animate&&!a&&r(y,i.cssClasses.tap,i.animationDuration),x.forEach((function(e){Z(e,w[e],!0,!1)})),Y(),x.forEach((function(e){B("update",e),null!==n[e]&&t&&B("set",e)}))}function ne(){var e=k.map(i.format.to);return 1===e.length?e[0]:e}function re(e,t){O[e]=O[e]||[],O[e].push(t),"update"===e.split(".")[0]&&d.forEach((function(e,t){B("update",t)}))}if(y.noUiSlider)throw new Error("noUiSlider ("+e+"): Slider was already initialized.");return function(e){s(e,i.cssClasses.target),0===i.dir?s(e,i.cssClasses.ltr):s(e,i.cssClasses.rtl),0===i.ort?s(e,i.cssClasses.horizontal):s(e,i.cssClasses.vertical),l=U(e,i.cssClasses.base)}(y),function(e,t){d=[],(f=[]).push(T(t,e[0]));for(var n=0;n<i.handles;n++)d.push(j(t,n)),x[n]=n,f.push(T(t,e[n+1]))}(i.connect,l),p={destroy:function(){for(var e in i.cssClasses)i.cssClasses.hasOwnProperty(e)&&u(y,i.cssClasses[e]);for(;y.firstChild;)y.removeChild(y.firstChild);delete y.noUiSlider},steps:function(){return w.map((function(e,t){var n=S.getNearbySteps(e),r=k[t],o=n.thisStep.step,i=null;!1!==o&&r+o>n.stepAfter.startValue&&(o=n.stepAfter.startValue-r),i=r>n.thisStep.startValue?n.thisStep.step:!1!==n.stepBefore.step&&r-n.stepBefore.highestStep,100===e?o=null:0===e&&(i=null);var a=S.countStepDecimals();return null!==o&&!1!==o&&(o=Number(o.toFixed(a))),null!==i&&!1!==i&&(i=Number(i.toFixed(a))),[i,o]}))},on:re,off:function(e){var t=e&&e.split(".")[0],n=t&&e.substring(t.length);Object.keys(O).forEach((function(e){var r=e.split(".")[0],o=e.substring(r.length);t&&t!==r||n&&n!==o||delete O[e]}))},get:ne,set:te,reset:function(e){te(i.start,e)},__moveHandles:function(e,t,n){I(e,t,w,n)},options:a,updateOptions:function(e,t){var n=ne(),r=["margin","limit","padding","range","animate","snap","step","format"];r.forEach((function(t){void 0!==e[t]&&(a[t]=e[t])}));var o=D(a);r.forEach((function(t){void 0!==e[t]&&(i[t]=o[t])})),S=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips&&M(i.pips),w=[],te(e.start||n,t)},target:y,removePips:L,pips:M},(m=i.events).fixed||d.forEach((function(e,t){_(v.start,e.children[0],J,{handleNumbers:[t]})})),m.tap&&_(v.start,l,W,{}),m.hover&&_(v.move,l,Q,{hover:!0}),m.drag&&f.forEach((function(e,t){if(!1!==e&&0!==t&&t!==f.length-1){var n=d[t-1],r=d[t],o=[e];s(e,i.cssClasses.draggable),m.fixed&&(o.push(n.children[0]),o.push(r.children[0])),o.forEach((function(e){_(v.start,e,J,{handles:[n,r],handleNumbers:[t-1,t]})}))}})),te(i.start),i.pips&&M(i.pips),i.tooltips&&(g=d.map(R),re("update",(function(e,t,n){if(g[t]){var r=e[t];!0!==i.tooltips[t]&&(r=i.tooltips[t].to(n[t])),g[t].innerHTML=r}}))),re("update",(function(e,t,n,r,o){x.forEach((function(e){var t=d[e],r=X(w,e,0,!0,!0,!0),a=X(w,e,100,!0,!0,!0),s=o[e],u=i.ariaFormat.to(n[e]);t.children[0].setAttribute("aria-valuemin",r.toFixed(1)),t.children[0].setAttribute("aria-valuemax",a.toFixed(1)),t.children[0].setAttribute("aria-valuenow",s.toFixed(1)),t.children[0].setAttribute("aria-valuetext",u)}))})),p}return{version:e,create:function(t,n){if(!t||!t.nodeName)throw new Error("noUiSlider ("+e+"): create requires a single element, got: "+t);var r=z(t,D(n),n);return t.noUiSlider=r,r}}})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(32),o=n(0);t.default=function(e,t,n){void 0===n&&(n={});for(var i=n.steps||64,a=n.properties?n.properties:!Array.isArray(e)&&"Feature"===e.type&&e.properties?e.properties:{},s=[],u=0;u<i;u++)s.push(r.default(e,t,-360*u/i,n).geometry.coordinates);return s.push(s[0]),o.polygon([s],a)}},function(e,t,n){var r=n(34),o=n(36).featureCollection;e.exports=function(e,t){for(var n=o([]),i=0;i<t.features.length;i++)for(var a=0;a<e.features.length;a++){r(e.features[a],t.features[i])&&n.features.push(e.features[a])}return n}},function(e,t,n){"use strict";var r=n(5),o=n(7),i=n(50),a=n(11),s={getDirections:function(e){r.assertShape({profile:r.oneOf("driving-traffic","driving","walking","cycling"),waypoints:r.required(r.arrayOf(r.shape({coordinates:r.required(r.coordinates),approach:r.oneOf("unrestricted","curb"),bearing:r.arrayOf(r.range([0,360])),radius:r.oneOfType(r.number,r.equal("unlimited")),waypointName:r.string}))),alternatives:r.boolean,annotations:r.arrayOf(r.oneOf("duration","distance","speed","congestion")),bannerInstructions:r.boolean,continueStraight:r.boolean,exclude:r.string,geometries:r.string,language:r.string,overview:r.string,roundaboutExits:r.boolean,steps:r.boolean,voiceInstructions:r.boolean,voiceUnits:r.string})(e),e.profile=e.profile||"driving";var t={coordinates:[],approach:[],bearing:[],radius:[],waypointName:[]},n=e.waypoints.length;if(n<2||n>25)throw new Error("waypoints must include between 2 and 25 DirectionsWaypoints");e.waypoints.forEach((function(e){t.coordinates.push(e.coordinates[0]+","+e.coordinates[1]),["bearing"].forEach((function(t){e.hasOwnProperty(t)&&null!=e[t]&&(e[t]=e[t].join(","))})),["approach","bearing","radius","waypointName"].forEach((function(n){e.hasOwnProperty(n)&&null!=e[n]?t[n].push(e[n]):t[n].push("")}))})),["approach","bearing","radius","waypointName"].forEach((function(e){t[e].every((function(e){return""===e}))?delete t[e]:t[e]=t[e].join(";")}));var o=a({alternatives:e.alternatives,annotations:e.annotations,banner_instructions:e.bannerInstructions,continue_straight:e.continueStraight,exclude:e.exclude,geometries:e.geometries,language:e.language,overview:e.overview,roundabout_exits:e.roundaboutExits,steps:e.steps,voice_instructions:e.voiceInstructions,voice_units:e.voiceUnits,approaches:t.approach,bearings:t.bearing,radiuses:t.radius,waypoint_names:t.waypointName});return this.client.createRequest({method:"GET",path:"/directions/v5/mapbox/:profile/:coordinates",params:{profile:e.profile,coordinates:t.coordinates.join(";")},query:i(o)})}};e.exports=o(s)},function(e,t,n){"use strict";var r={};function o(e){return Math.floor(Math.abs(e)+.5)*(e>=0?1:-1)}function i(e,t,n){var r=(e=o(e*n))-(t=o(t*n));r<<=1,e-t<0&&(r=~r);for(var i="";r>=32;)i+=String.fromCharCode(63+(32|31&r)),r>>=5;return i+=String.fromCharCode(r+63)}function a(e){for(var t=[],n=0;n<e.length;n++)t.push(e[n].slice().reverse());return t}r.decode=function(e,t){for(var n,r=0,o=0,i=0,a=[],s=0,u=0,c=null,l=Math.pow(10,Number.isInteger(t)?t:5);r<e.length;){c=null,s=0,u=0;do{u|=(31&(c=e.charCodeAt(r++)-63))<<s,s+=5}while(c>=32);n=1&u?~(u>>1):u>>1,s=u=0;do{u|=(31&(c=e.charCodeAt(r++)-63))<<s,s+=5}while(c>=32);o+=n,i+=1&u?~(u>>1):u>>1,a.push([o/l,i/l])}return a},r.encode=function(e,t){if(!e.length)return"";for(var n=Math.pow(10,Number.isInteger(t)?t:5),r=i(e[0][0],0,n)+i(e[0][1],0,n),o=1;o<e.length;o++){var a=e[o],s=e[o-1];r+=i(a[0],s[0],n),r+=i(a[1],s[1],n)}return r},r.fromGeoJSON=function(e,t){if(e&&"Feature"===e.type&&(e=e.geometry),!e||"LineString"!==e.type)throw new Error("Input must be a GeoJSON LineString");return r.encode(a(e.coordinates),t)},r.toGeoJSON=function(e,t){return{type:"LineString",coordinates:a(r.decode(e,t))}},e.exports&&(e.exports=r)},function(e,t,n){"use strict";var r=n(1),o=n(5),i=n(10),a=n(11),s=n(7),u={},c=["country","region","postcode","district","place","locality","neighborhood","address","poi","poi.landmark"];u.forwardGeocode=function(e){o.assertShape({query:o.required(o.string),mode:o.oneOf("mapbox.places","mapbox.places-permanent"),countries:o.arrayOf(o.string),proximity:o.coordinates,types:o.arrayOf(o.oneOf(c)),autocomplete:o.boolean,bbox:o.arrayOf(o.number),limit:o.number,language:o.arrayOf(o.string)})(e),e.mode=e.mode||"mapbox.places";var t=a(r({country:e.countries},i(e,["proximity","types","autocomplete","bbox","limit","language"])));return this.client.createRequest({method:"GET",path:"/geocoding/v5/:mode/:query.json",params:i(e,["mode","query"]),query:t})},u.reverseGeocode=function(e){o.assertShape({query:o.required(o.coordinates),mode:o.oneOf("mapbox.places","mapbox.places-permanent"),countries:o.arrayOf(o.string),types:o.arrayOf(o.oneOf(c)),bbox:o.arrayOf(o.number),limit:o.number,language:o.arrayOf(o.string),reverseMode:o.oneOf("distance","score")})(e),e.mode=e.mode||"mapbox.places";var t=a(r({country:e.countries},i(e,["country","types","bbox","limit","language","reverseMode"])));return this.client.createRequest({method:"GET",path:"/geocoding/v5/:mode/:query.json",params:i(e,["mode","query"]),query:t})},e.exports=s(u)},function(e,t,n){e.exports=function(){"use strict";return function(e){var t,n,r=document,o=r.createElement("div"),i=o.style,a=navigator.userAgent,s=-1!==a.indexOf("Firefox")&&-1!==a.indexOf("Mobile"),u=e.debounceWaitMs||0,c=e.preventSubmit||!1,l=s?"input":"keyup",d=[],f="",p=2,h=e.showOnFocus,m=0;if(void 0!==e.minLength&&(p=e.minLength),!e.input)throw new Error("input undefined");var g=e.input;function v(){n&&window.clearTimeout(n)}function b(){return!!o.parentNode}function y(){var e;m++,d=[],f="",t=void 0,(e=o.parentNode)&&e.removeChild(o)}function w(){for(;o.firstChild;)o.removeChild(o.firstChild);var n=function(e,t){var n=r.createElement("div");return n.textContent=e.label||"",n};e.render&&(n=e.render);var a=function(e,t){var n=r.createElement("div");return n.textContent=e,n};e.renderGroup&&(a=e.renderGroup);var s=r.createDocumentFragment(),u="#9?$";if(d.forEach((function(r){if(r.group&&r.group!==u){u=r.group;var o=a(r.group,f);o&&(o.className+=" group",s.appendChild(o))}var i=n(r,f);i&&(i.addEventListener("click",(function(t){e.onSelect(r,g),y(),t.preventDefault(),t.stopPropagation()})),r===t&&(i.className+=" selected"),s.appendChild(i))})),o.appendChild(s),d.length<1){if(!e.emptyMsg)return void y();var c=r.createElement("div");c.className="empty",c.textContent=e.emptyMsg,o.appendChild(c)}o.parentNode||r.body.appendChild(o),function(){if(b()){i.height="auto",i.width=g.offsetWidth+"px";var t=g.getBoundingClientRect(),n=t.top+g.offsetHeight,r=window.innerHeight-n;r<0&&(r=0),i.top=n+"px",i.bottom="",i.left=t.left+"px",i.maxHeight=r+"px",e.customize&&e.customize(g,t,o,r)}}(),function(){var e=o.getElementsByClassName("selected");if(e.length>0){var t=e[0],n=t.previousElementSibling;if(n&&-1!==n.className.indexOf("group")&&!n.previousElementSibling&&(t=n),t.offsetTop<o.scrollTop)o.scrollTop=t.offsetTop;else{var r=t.offsetTop+t.offsetHeight,i=o.scrollTop+o.offsetHeight;r>i&&(o.scrollTop+=r-i)}}}()}function x(){b()&&w()}function E(){x()}function S(e){e.target!==o?x():e.preventDefault()}function k(e){for(var t=e.which||e.keyCode||0,n=0,r=[38,13,27,39,37,16,17,18,20,91,9];n<r.length;n++)if(t===r[n])return;40===t&&b()||A(0)}function O(n){var r=n.which||n.keyCode||0;if(38===r||40===r||27===r){var o=b();if(27===r)y();else{if(!b||d.length<1)return;38===r?function(){if(d.length<1)t=void 0;else if(t===d[0])t=d[d.length-1];else for(var e=d.length-1;e>0;e--)if(t===d[e]||1===e){t=d[e-1];break}}():function(){if(d.length<1&&(t=void 0),t&&t!==d[d.length-1]){for(var e=0;e<d.length-1;e++)if(t===d[e]){t=d[e+1];break}}else t=d[0]}(),w()}return n.preventDefault(),void(o&&n.stopPropagation())}13===r&&(t&&(e.onSelect(t,g),y()),c&&n.preventDefault())}function C(){h&&A(1)}function A(r){var o=++m,i=g.value;i.length>=p||1===r?(v(),n=window.setTimeout((function(){e.fetch(i,(function(e){m===o&&e&&(f=i,t=(d=e).length>0?d[0]:void 0,w())}),0)}),0===r?u:0)):y()}function N(){setTimeout((function(){r.activeElement!==g&&y()}),200)}return o.className="autocomplete "+(e.className||""),i.position="fixed",o.addEventListener("mousedown",(function(e){e.stopPropagation(),e.preventDefault()})),g.addEventListener("keydown",O),g.addEventListener(l,k),g.addEventListener("blur",N),g.addEventListener("focus",C),window.addEventListener("resize",E),r.addEventListener("scroll",S,!0),{destroy:function(){g.removeEventListener("focus",C),g.removeEventListener("keydown",O),g.removeEventListener(l,k),g.removeEventListener("blur",N),window.removeEventListener("resize",E),r.removeEventListener("scroll",S,!0),v(),y(),m++}}}}()},function(e,t,n){var r=n(20);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(4)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){t=e.exports=n(3)(!1);var r=n(21),o=r(n(22)),i=r(n(23)),a=r(n(24)),s=r(n(25)),u=r(n(26)),c=r(n(27)),l=r(n(28));t.push([e.i,"canvas.mapboxgl-canvas {\n  background: lightgray;\n}\n\n.marker {\n  background-image: url("+o+");\n  background-size: cover;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  cursor: pointer;\n}\n\n.map-marker-directions {\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 12px;\n  width: 20px;\n}\n\n.map-marker-directions.is-origin {\n  background-image: url("+i+");\n}\n.map-marker-directions.is-destination {\n  background-image: url("+a+");\n}\n\n\n\n/********** Directions Input ****************************************/\n\n.directions {\n  position: absolute;\n  margin: 1em;\n  background: rgba(255, 255, 255, 0.85);\n}\n\n.directions--content {\n  padding: 1em;\n}\n\n.directions--toggle-button {\n  background: #4AB2F7;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 60px;\n  cursor: pointer;\n}\n\n.directions--toggle-button.shown {\n  background-image: url("+s+");\n}\n.directions--toggle-button.hidden {\n  background-image: url("+u+");\n}\n\n.directions--toggle-button {\n  height: 2em;\n}\n\n#directions--distance-range {\n  /* width: 157px; */\n  width: 100%;\n}\n\n.directions--distance-picker {\n  margin-bottom: 2em;\n  padding: 0.5em;\n}\n\n#directions--distance-range .noUi-connect {\n  background-color: rgb(222, 224, 224);\n  box-shadow: inset 0 0 1px rgba(51,51,51,.2);\n}\n\n.noUi-pips.noUi-pips-horizontal {\n  height: 50px; /* was 80 which ate into button below */\n}\n\n/** Hide label until overwritten with input */\n.directions label {\n  opacity: 0;\n  transition: opacity 0.25s;\n  position: absolute;\n  top: -3px;\n  left: 16px;\n  font-size: 10px;\n\n  border: none;\n  background: #c5d7f1; /* match input box-shadow */\n  color: white;\n  padding: 0 2px;\n}\n\n.directions input:valid ~ label {\n  opacity: 1;\n}\n\n\n.directions--locate-origin.column,\n.directions--swap-endpoints.column {\n  padding-left: 0;\n}\n\n.directions--locate-origin button {\n  background-image: url("+c+");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 20px;\n  width: 38px;\n}\n\n.directions--swap-endpoints button {\n  background-image: url("+l+");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 20px;\n  width: 38px;\n}\n\n/* .directions--locate-origin button.is-light:hover {\n  border-color: black;\n} */\n\n\n@media screen and (max-width: 780px) {\n  .directions {\n    margin: 0;\n  }\n}\n\n\n/********** Directions Autocomplete **********************************/\n\n.autocomplete {\n  background: white;\n  z-index: 100;\n  border: 1px solid #e4e2e2;\n}\n\n.autocomplete div {\n  border-top: 1px solid #adadad;\n  padding: 1em;\n  cursor: pointer;\n}\n\n.autocomplete div:hover, .autocomplete div:focus {\n  background: rgb(202, 206, 227);\n}\n\n\n/********** Station Popup *******************************************/\n\n.station-popup--container .mapboxgl-popup-content {\n  padding-bottom: 6px;\n}\n\n.station-popup {\n  text-align: center;\n}\n\n.station-popup h3 {\n  margin-bottom: 1em;\n}\n\n/* div.station-popup--directions {\n} */\n\ndiv.station-popup--directions a{\n  text-decoration: none;\n}\n\n.station-popup--coordinates {\n  border-top: 1px solid lightgrey;\n  text-align: right;\n  padding-top: 0.5em;\n  margin-top: 0.5em;\n\n  font-size: smaller;\n  color: lightgrey;\n}\n\n.station-popup--bikes-number, .station-popup--docks-number {\n  font-size: large;\n}\n\n/* .station-popup--bikes-text, .station-popup--docks-text {\n} */\n\ndiv.station-popup--stats {\n  margin-bottom: 0 !important;\n  font-weight: bold;\n}\n\n.station-popup--alert {\n  font-weight: bold;\n  font-size: large;\n  margin-bottom: 1em;\n}\n",""])},function(e,t,n){"use strict";e.exports=function(e,t){return"string"!=typeof(e=e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)||t?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,n){e.exports=n.p+"d049203bc74696d587a3cdb1d0a661d2.png"},function(e,t,n){e.exports=n.p+"2f67bd14f9872daf7713a52ce2e45f9a.svg"},function(e,t,n){e.exports=n.p+"99da9a1118b8e43225d3da6fee645ad0.svg"},function(e,t,n){e.exports=n.p+"9f8d8013b95b47ff16a0bef615829383.svg"},function(e,t,n){e.exports=n.p+"1f7c29950ae1d733f2cfd41702f409b9.svg"},function(e,t,n){e.exports=n.p+"99c6879b01fe7fb27fb26cf2afc7360d.svg"},function(e,t,n){e.exports=n.p+"66a48261d3f7e55140f1a7d6db359cf0.svg"},function(e,t,n){var r=n(30);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(4)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,'/*! nouislider - 10.0.0 - 2017-05-28 14:52:48 */.noUi-target,.noUi-target *{-webkit-touch-callout:none;-webkit-tap-highlight-color:transparent;-webkit-user-select:none;-ms-touch-action:none;touch-action:none;-ms-user-select:none;-moz-user-select:none;user-select:none;-moz-box-sizing:border-box;box-sizing:border-box}.noUi-target{position:relative;direction:ltr}.noUi-base{width:100%;height:100%;position:relative;z-index:1}.noUi-connect{position:absolute;right:0;top:0;left:0;bottom:0}.noUi-origin{position:absolute;height:0;width:0}.noUi-handle{position:relative;z-index:1}.noUi-state-tap .noUi-connect,.noUi-state-tap .noUi-origin{-webkit-transition:top .3s,right .3s,bottom .3s,left .3s;transition:top .3s,right .3s,bottom .3s,left .3s}.noUi-state-drag *{cursor:inherit!important}.noUi-base,.noUi-handle{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.noUi-horizontal{height:18px}.noUi-horizontal .noUi-handle{width:34px;height:28px;left:-17px;top:-6px}.noUi-vertical{width:18px}.noUi-vertical .noUi-handle{width:28px;height:34px;left:-6px;top:-17px}.noUi-target{background:#FAFAFA;border-radius:4px;border:1px solid #D3D3D3;box-shadow:inset 0 1px 1px #F0F0F0,0 3px 6px -5px #BBB}.noUi-connect{background:#3FB8AF;border-radius:4px;box-shadow:inset 0 0 3px rgba(51,51,51,.45);-webkit-transition:background 450ms;transition:background 450ms;}.noUi-draggable{cursor:ew-resize}.noUi-vertical .noUi-draggable{cursor:ns-resize}.noUi-handle{border:1px solid #D9D9D9;border-radius:3px;background:#FFF;cursor:default;box-shadow: inset 0 0 1px #FFF,inset 0 1px 7px #EBEBEB,0 3px 6px -3px #BBB;}.noUi-active{box-shadow:inset 0 0 1px #FFF,inset 0 1px 7px #DDD,0 3px 6px -3px #BBB}.noUi-handle:after,.noUi-handle:before{content:"";display:block;position:absolute;height:14px;width:1px;background:#E8E7E6;left:14px;top:6px}.noUi-handle:after{left:17px}.noUi-vertical .noUi-handle:after,.noUi-vertical .noUi-handle:before{width:14px;height:1px;left:6px;top:14px}.noUi-vertical .noUi-handle:after{top:17px}[disabled] .noUi-connect{background:#B8B8B8}[disabled] .noUi-handle,[disabled].noUi-handle,[disabled].noUi-target{cursor:not-allowed}.noUi-pips,.noUi-pips *{-moz-box-sizing:border-box;box-sizing:border-box}.noUi-pips{position:absolute;color:#999;}.noUi-value{position:absolute;white-space:nowrap;text-align:center}.noUi-value-sub{color:#ccc;font-size:10px}.noUi-marker{position:absolute;background:#CCC}.noUi-marker-large,.noUi-marker-sub{background:#AAA}.noUi-pips-horizontal{padding:10px 0;height:80px;top:100%;left:0;width:100%}.noUi-value-horizontal{-webkit-transform:translate3d(-50%,50%,0);transform:translate3d(-50%,50%,0)}.noUi-marker-horizontal.noUi-marker{margin-left:-1px;width:2px;height:5px}.noUi-marker-horizontal.noUi-marker-sub{height:10px}.noUi-marker-horizontal.noUi-marker-large{height:15px}.noUi-pips-vertical{padding:0 10px;height:100%;top:0;left:100%}.noUi-value-vertical{-webkit-transform:translate3d(0,50%,0);transform:translate3d(0,50%,0);padding-left:25px}.noUi-marker-vertical.noUi-marker{width:5px;height:2px;margin-top:-1px}.noUi-marker-vertical.noUi-marker-sub{width:10px}.noUi-marker-vertical.noUi-marker-large{width:15px}.noUi-tooltip{display:block;position:absolute;border:1px solid #D9D9D9;border-radius:3px;background:#fff;color:#000;padding:5px;text-align:center;white-space:nowrap}.noUi-horizontal .noUi-tooltip{-webkit-transform:translate(-50%,0);transform:translate(-50%,0);left:50%;bottom:120%}.noUi-vertical .noUi-tooltip{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);top:50%;right:120%}',""])},function(e,t,n){e.exports=n.p+"favicon.ico"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(33);t.default=function(e,t,n,i){void 0===i&&(i={});var a=o.getCoord(e),s=r.degreesToRadians(a[0]),u=r.degreesToRadians(a[1]),c=r.degreesToRadians(n),l=r.lengthToRadians(t,i.units),d=Math.asin(Math.sin(u)*Math.cos(l)+Math.cos(u)*Math.sin(l)*Math.cos(c)),f=s+Math.atan2(Math.sin(c)*Math.sin(l)*Math.cos(u),Math.cos(l)-Math.sin(u)*Math.sin(d)),p=r.radiansToDegrees(f),h=r.radiansToDegrees(d);return r.point([p,h],i.properties)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.getCoord=function(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return e.geometry.coordinates;if("Point"===e.type)return e.coordinates}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return e;throw new Error("coord must be GeoJSON Point or an Array of numbers")},t.getCoords=function(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")},t.containsNumber=function e(t){if(t.length>1&&r.isNumber(t[0])&&r.isNumber(t[1]))return!0;if(Array.isArray(t[0])&&t[0].length)return e(t[0]);throw new Error("coordinates must only contain numbers")},t.geojsonType=function(e,t,n){if(!t||!n)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+n+": must be a "+t+", given "+e.type)},t.featureOf=function(e,t,n){if(!e)throw new Error("No feature passed");if(!n)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+n+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+n+": must be a "+t+", given "+e.geometry.type)},t.collectionOf=function(e,t,n){if(!e)throw new Error("No featureCollection passed");if(!n)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+n+", FeatureCollection required");for(var r=0,o=e.features;r<o.length;r++){var i=o[r];if(!i||"Feature"!==i.type||!i.geometry)throw new Error("Invalid input to "+n+", Feature with geometry required");if(!i.geometry||i.geometry.type!==t)throw new Error("Invalid input to "+n+": must be a "+t+", given "+i.geometry.type)}},t.getGeom=function(e){return"Feature"===e.type?e.geometry:e},t.getType=function(e,t){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}},function(e,t,n){var r=n(35),o=r.getCoord,i=r.getCoords;function a(e,t,n){var r=!1;t[0][0]===t[t.length-1][0]&&t[0][1]===t[t.length-1][1]&&(t=t.slice(0,t.length-1));for(var o=0,i=t.length-1;o<t.length;i=o++){var a=t[o][0],s=t[o][1],u=t[i][0],c=t[i][1];if(e[1]*(a-u)+s*(u-e[0])+c*(e[0]-a)==0&&(a-e[0])*(u-e[0])<=0&&(s-e[1])*(c-e[1])<=0)return!n;s>e[1]!=c>e[1]&&e[0]<(u-a)*(e[1]-s)/(c-s)+a&&(r=!r)}return r}e.exports=function(e,t,n){if(!e)throw new Error("point is required");if(!t)throw new Error("polygon is required");var r=o(e),s=i(t),u=t.geometry?t.geometry.type:t.type,c=t.bbox;if(c&&!1===function(e,t){return t[0]<=e[0]&&t[1]<=e[1]&&t[2]>=e[0]&&t[3]>=e[1]}(r,c))return!1;"Polygon"===u&&(s=[s]);for(var l=0,d=!1;l<s.length&&!d;l++)if(a(r,s[l][0],n)){for(var f=!1,p=1;p<s[l].length&&!f;)a(r,s[l][p],!n)&&(f=!0),p++;f||(d=!0)}return d}},function(e,t){function n(e){if(!e)throw new Error("obj is required");var t;if(e.length?t=e:e.coordinates?t=e.coordinates:e.geometry&&e.geometry.coordinates&&(t=e.geometry.coordinates),t)return r(t),t;throw new Error("No valid coordinates")}function r(e){if(e.length>1&&"number"==typeof e[0]&&"number"==typeof e[1])return!0;if(Array.isArray(e[0])&&e[0].length)return r(e[0]);throw new Error("coordinates must only contain numbers")}function o(e){if(!e)throw new Error("geojson is required");if(void 0!==e.geometry)return e.geometry;if(e.coordinates||e.geometries)return e;throw new Error("geojson must be a valid Feature or Geometry Object")}e.exports={geojsonType:function(e,t,n){if(!t||!n)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+n+": must be a "+t+", given "+e.type)},collectionOf:function(e,t,n){if(!e)throw new Error("No featureCollection passed");if(!n)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+n+", FeatureCollection required");for(var r=0;r<e.features.length;r++){var o=e.features[r];if(!o||"Feature"!==o.type||!o.geometry)throw new Error("Invalid input to "+n+", Feature with geometry required");if(!o.geometry||o.geometry.type!==t)throw new Error("Invalid input to "+n+": must be a "+t+", given "+o.geometry.type)}},featureOf:function(e,t,n){if(!e)throw new Error("No feature passed");if(!n)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+n+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+n+": must be a "+t+", given "+e.geometry.type)},getCoord:function(e){if(!e)throw new Error("obj is required");var t=n(e);if(t.length>1&&"number"==typeof t[0]&&"number"==typeof t[1])return t;throw new Error("Coordinate is not a valid Point")},getCoords:n,containsNumber:r,getGeom:o,getGeomType:function(e){if(!e)throw new Error("geojson is required");var t=o(e);if(t)return t.type}}},function(e,t){function n(e,t,n,r){if(void 0===e)throw new Error("geometry is required");if(t&&t.constructor!==Object)throw new Error("properties must be an Object");if(n&&4!==n.length)throw new Error("bbox must be an Array of 4 numbers");if(r&&-1===["string","number"].indexOf(typeof r))throw new Error("id must be a number or a string");var o={type:"Feature"};return r&&(o.id=r),n&&(o.bbox=n),o.properties=t||{},o.geometry=e,o}function r(e,t,r,o){if(!e)throw new Error("No coordinates passed");if(void 0===e.length)throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");if(!h(e[0])||!h(e[1]))throw new Error("Coordinates must contain numbers");return n({type:"Point",coordinates:e},t,r,o)}function o(e,t,r,o){if(!e)throw new Error("No coordinates passed");for(var i=0;i<e.length;i++){var a=e[i];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<a[a.length-1].length;s++){if(0===i&&0===s&&!h(a[0][0])||!h(a[0][1]))throw new Error("Coordinates must contain numbers");if(a[a.length-1][s]!==a[0][s])throw new Error("First and last Position are not equivalent.")}}return n({type:"Polygon",coordinates:e},t,r,o)}function i(e,t,r,o){if(!e)throw new Error("No coordinates passed");if(e.length<2)throw new Error("Coordinates must be an array of two or more positions");if(!h(e[0][1])||!h(e[0][1]))throw new Error("Coordinates must contain numbers");return n({type:"LineString",coordinates:e},t,r,o)}function a(e,t,r,o){if(!e)throw new Error("No coordinates passed");return n({type:"MultiLineString",coordinates:e},t,r,o)}function s(e,t,r,o){if(!e)throw new Error("No coordinates passed");return n({type:"MultiPoint",coordinates:e},t,r,o)}function u(e,t,r,o){if(!e)throw new Error("No coordinates passed");return n({type:"MultiPolygon",coordinates:e},t,r,o)}var c={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,centimeters:6373e5,centimetres:6373e5,kilometers:6373,kilometres:6373,feet:20908792.65},l={kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,centimetres:1e4,millimeter:1e6,acres:247105e-9,miles:386e-9,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function d(e,t){if(null==e)throw new Error("radians is required");var n=c[t||"kilometers"];if(!n)throw new Error("units is invalid");return e*n}function f(e,t){if(null==e)throw new Error("distance is required");var n=c[t||"kilometers"];if(!n)throw new Error("units is invalid");return e/n}function p(e){if(null==e)throw new Error("radians is required");return 180*(e%(2*Math.PI))/Math.PI}function h(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}e.exports={feature:n,geometry:function(e,t,n){if(!e)throw new Error("type is required");if(!t)throw new Error("coordinates is required");if(!Array.isArray(t))throw new Error("coordinates must be an Array");if(n&&4!==n.length)throw new Error("bbox must be an Array of 4 numbers");var c;switch(e){case"Point":c=r(t).geometry;break;case"LineString":c=i(t).geometry;break;case"Polygon":c=o(t).geometry;break;case"MultiPoint":c=s(t).geometry;break;case"MultiLineString":c=a(t).geometry;break;case"MultiPolygon":c=u(t).geometry;break;default:throw new Error(e+" is invalid")}return n&&(c.bbox=n),c},featureCollection:function(e,t,n){if(!e)throw new Error("No features passed");if(!Array.isArray(e))throw new Error("features must be an Array");if(t&&4!==t.length)throw new Error("bbox must be an Array of 4 numbers");if(n&&-1===["string","number"].indexOf(typeof n))throw new Error("id must be a number or a string");var r={type:"FeatureCollection"};return n&&(r.id=n),t&&(r.bbox=t),r.features=e,r},geometryCollection:function(e,t,r,o){if(!e)throw new Error("geometries is required");if(!Array.isArray(e))throw new Error("geometries must be an Array");return n({type:"GeometryCollection",geometries:e},t,r,o)},point:r,multiPoint:s,lineString:i,multiLineString:a,polygon:o,multiPolygon:u,radiansToDistance:d,distanceToRadians:f,distanceToDegrees:function(e,t){return p(f(e,t))},radians2degrees:p,degrees2radians:function(e){if(null==e)throw new Error("degrees is required");return e%360*Math.PI/180},bearingToAngle:function(e){if(null==e)throw new Error("bearing is required");var t=e%360;return t<0&&(t+=360),t},convertDistance:function(e,t,n){if(null==e)throw new Error("distance is required");if(!(e>=0))throw new Error("distance must be a positive number");return d(f(e,t),n||"kilometers")},convertArea:function(e,t,n){if(null==e)throw new Error("area is required");if(!(e>=0))throw new Error("area must be a positive number");var r=l[t||"meters"];if(!r)throw new Error("invalid original units");var o=l[n||"kilometers"];if(!o)throw new Error("invalid final units");return e/r*o},round:function(e,t){if(null==e||isNaN(e))throw new Error("num is required");if(t&&!(t>=0))throw new Error("precision must be a positive number");var n=Math.pow(10,t||0);return Math.round(e*n)/n},isNumber:h}},function(e,t,n){"use strict";var r=n(38),o=n(1),i="value",a={};function s(e){var t=Array.isArray(e);return function(n){var r,o=u(a.plainArray,n);if(o)return o;if(t&&n.length!==e.length)return"an array with "+e.length+" items";for(var i=0;i<n.length;i++)if(o=u((r=i,t?e[r]:e),n[i]))return[i].concat(o)}}function u(e,t){if(null!=t||e.hasOwnProperty("__required")){var n=e(t);return n?Array.isArray(n)?n:[n]:void 0}}function c(e,t){var n=e.length,r=e[n-1],a=e.slice(0,n-1);return 0===a.length&&(a=[i]),t=o(t,{path:a}),"function"==typeof r?r(t):d(t,function(e){return"must be "+function(e){if(/^an? /.test(e))return e;if(/^[aeiou]/i.test(e))return"an "+e;if(/^[a-z]/i.test(e))return"a "+e;return e}(e)+"."}(r))}function l(e){return e.length<2?e[0]:2===e.length?e.join(" or "):e.slice(0,-1).join(", ")+", or "+e.slice(-1)}function d(e,t){return(f(e.path)?"Item at position ":"")+(e.path.join(".")+" "+t)}function f(e){return"number"==typeof e[e.length-1]||"number"==typeof e[0]}a.assert=function(e,t){return t=t||{},function(n){var r=u(e,n);if(r){var o=c(r,t);throw t.apiName&&(o=t.apiName+": "+o),new Error(o)}}},a.shape=function(e){var t,n=(t=e,Object.keys(t||{}).map((function(e){return{key:e,value:t[e]}})));return function(e){var t,r=u(a.plainObject,e);if(r)return r;for(var o=[],s=0;s<n.length;s++)t=n[s].key,(r=u(n[s].value,e[t]))&&o.push([t].concat(r));return o.length<2?o[0]:function(e){o=o.map((function(t){return"- "+t[0]+": "+c(t,e).split("\n").join("\n  ")}));var t=e.path.join(".");return"The following properties"+(t===i?"":" of "+t)+" have invalid values:\n  "+o.join("\n  ")}}},a.strictShape=function(e){var t=a.shape(e);return function(n){var r=t(n);if(r)return r;var o=Object.keys(n).reduce((function(t,n){return void 0===e[n]&&t.push(n),t}),[]);return 0!==o.length?function(){return"The following keys are invalid: "+o.join(", ")}:void 0}},a.arrayOf=function(e){return s(e)},a.tuple=function(){var e=Array.isArray(arguments[0])?arguments[0]:Array.prototype.slice.call(arguments);return s(e)},a.required=function(e){function t(t){return null==t?function(e){return d(e,f(e.path)?"cannot be undefined/null.":"is required.")}:e.apply(this,arguments)}return t.__required=!0,t},a.oneOfType=function(){var e=Array.isArray(arguments[0])?arguments[0]:Array.prototype.slice.call(arguments);return function(t){var n=e.map((function(e){return u(e,t)})).filter(Boolean);if(n.length===e.length)return n.every((function(e){return 1===e.length&&"string"==typeof e[0]}))?l(n.map((function(e){return e[0]}))):n.reduce((function(e,t){return t.length>e.length?t:e}))}},a.equal=function(e){return function(t){if(t!==e)return JSON.stringify(e)}},a.oneOf=function(){var e=Array.isArray(arguments[0])?arguments[0]:Array.prototype.slice.call(arguments),t=e.map((function(e){return a.equal(e)}));return a.oneOfType.apply(this,t)},a.range=function(e){var t=e[0],n=e[1];return function(e){if(u(a.number,e)||e<t||e>n)return"number between "+t+" & "+n+" (inclusive)"}},a.any=function(){},a.boolean=function(e){if("boolean"!=typeof e)return"boolean"},a.number=function(e){if("number"!=typeof e)return"number"},a.plainArray=function(e){if(!Array.isArray(e))return"array"},a.plainObject=function(e){if(!r(e))return"object"},a.string=function(e){if("string"!=typeof e)return"string"},a.func=function(e){if("function"!=typeof e)return"function"},a.validate=u,a.processMessage=c,e.exports=a},function(e,t,n){"use strict";var r=Object.prototype.toString;e.exports=function(e){var t;return"[object Object]"===r.call(e)&&(null===(t=Object.getPrototypeOf(e))||t===Object.getPrototypeOf({}))}},function(e,t,n){(function(e,r){var o;/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */!function(i){var a=t,s=(e&&e.exports,"object"==typeof r&&r);s.global!==s&&s.window;var u=function(e){this.message=e};(u.prototype=new Error).name="InvalidCharacterError";var c=function(e){throw new u(e)},l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",d=/[\t\n\f\r ]/g,f={encode:function(e){e=String(e),/[^\0-\xFF]/.test(e)&&c("The string to be encoded contains characters outside of the Latin1 range.");for(var t,n,r,o,i=e.length%3,a="",s=-1,u=e.length-i;++s<u;)t=e.charCodeAt(s)<<16,n=e.charCodeAt(++s)<<8,r=e.charCodeAt(++s),a+=l.charAt((o=t+n+r)>>18&63)+l.charAt(o>>12&63)+l.charAt(o>>6&63)+l.charAt(63&o);return 2==i?(t=e.charCodeAt(s)<<8,n=e.charCodeAt(++s),a+=l.charAt((o=t+n)>>10)+l.charAt(o>>4&63)+l.charAt(o<<2&63)+"="):1==i&&(o=e.charCodeAt(s),a+=l.charAt(o>>2)+l.charAt(o<<4&63)+"=="),a},decode:function(e){var t=(e=String(e).replace(d,"")).length;t%4==0&&(t=(e=e.replace(/==?$/,"")).length),(t%4==1||/[^+a-zA-Z0-9/]/.test(e))&&c("Invalid character: the string to be decoded is not correctly encoded.");for(var n,r,o=0,i="",a=-1;++a<t;)r=l.indexOf(e.charAt(a)),n=o%4?64*n+r:r,o++%4&&(i+=String.fromCharCode(255&n>>(-2*o&6)));return i},version:"0.1.0"};void 0===(o=function(){return f}.call(t,n,t,e))||(e.exports=o)}()}).call(this,n(40)(e),n(6))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";var r=n(9),o=n(1),i=n(42),a=n(43),s=n(2),u=1;function c(e,t){if(!e)throw new Error("MapiRequest requires a client");if(!t||!t.path||!t.method)throw new Error("MapiRequest requires an options object with path and method properties");var n={};t.body&&(n["content-type"]="application/json");var r=o(n,t.headers),a=Object.keys(r).reduce((function(e,t){return e[t.toLowerCase()]=r[t],e}),{});this.id=u++,this._options=t,this.emitter=new i,this.client=e,this.response=null,this.error=null,this.sent=!1,this.aborted=!1,this.path=t.path,this.method=t.method,this.origin=t.origin||e.origin,this.query=t.query||{},this.params=t.params||{},this.body=t.body||null,this.file=t.file||null,this.headers=a}c.prototype.url=function(e){var t=a.prependOrigin(this.path,this.origin);t=a.appendQueryObject(t,this.query);var n=this.params,i=null==e?this.client.accessToken:e;if(i){t=a.appendQueryParam(t,"access_token",i);var s=r(i).user;n=o({ownerId:s},n)}return t=a.interpolateRouteParams(t,n),t},c.prototype.send=function(){var e=this;if(e.sent)throw new Error("This request has already been sent. Check the response and error properties. Create a new request with clone().");return e.sent=!0,e.client.sendRequest(e).then((function(t){return e.response=t,e.emitter.emit(s.EVENT_RESPONSE,t),t}),(function(t){throw e.error=t,e.emitter.emit(s.EVENT_ERROR,t),t}))},c.prototype.abort=function(){this._nextPageRequest&&(this._nextPageRequest.abort(),delete this._nextPageRequest),this.response||this.error||this.aborted||(this.aborted=!0,this.client.abortRequest(this))},c.prototype.eachPage=function(e){var t=this;function n(n){e(null,n,(function(){delete t._nextPageRequest;var e=n.nextPage();e&&(t._nextPageRequest=e,o(e))}))}function r(t){e(t,null,(function(){}))}function o(e){e.send().then(n,r)}o(this)},c.prototype.clone=function(){return this._extend()},c.prototype._extend=function(e){var t=o(this._options,e);return new c(this.client,t)},e.exports=c},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,o="~";function i(){}function a(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function s(e,t,n,r,i){if("function"!=typeof n)throw new TypeError("The listener must be a function");var s=new a(n,r||e,i),u=o?o+t:t;return e._events[u]?e._events[u].fn?e._events[u]=[e._events[u],s]:e._events[u].push(s):(e._events[u]=s,e._eventsCount++),e}function u(e,t){0==--e._eventsCount?e._events=new i:delete e._events[t]}function c(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(o=!1)),c.prototype.eventNames=function(){var e,t,n=[];if(0===this._eventsCount)return n;for(t in e=this._events)r.call(e,t)&&n.push(o?t.slice(1):t);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(e)):n},c.prototype.listeners=function(e){var t=o?o+e:e,n=this._events[t];if(!n)return[];if(n.fn)return[n.fn];for(var r=0,i=n.length,a=new Array(i);r<i;r++)a[r]=n[r].fn;return a},c.prototype.listenerCount=function(e){var t=o?o+e:e,n=this._events[t];return n?n.fn?1:n.length:0},c.prototype.emit=function(e,t,n,r,i,a){var s=o?o+e:e;if(!this._events[s])return!1;var u,c,l=this._events[s],d=arguments.length;if(l.fn){switch(l.once&&this.removeListener(e,l.fn,void 0,!0),d){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,t),!0;case 3:return l.fn.call(l.context,t,n),!0;case 4:return l.fn.call(l.context,t,n,r),!0;case 5:return l.fn.call(l.context,t,n,r,i),!0;case 6:return l.fn.call(l.context,t,n,r,i,a),!0}for(c=1,u=new Array(d-1);c<d;c++)u[c-1]=arguments[c];l.fn.apply(l.context,u)}else{var f,p=l.length;for(c=0;c<p;c++)switch(l[c].once&&this.removeListener(e,l[c].fn,void 0,!0),d){case 1:l[c].fn.call(l[c].context);break;case 2:l[c].fn.call(l[c].context,t);break;case 3:l[c].fn.call(l[c].context,t,n);break;case 4:l[c].fn.call(l[c].context,t,n,r);break;default:if(!u)for(f=1,u=new Array(d-1);f<d;f++)u[f-1]=arguments[f];l[c].fn.apply(l[c].context,u)}}return!0},c.prototype.on=function(e,t,n){return s(this,e,t,n,!1)},c.prototype.once=function(e,t,n){return s(this,e,t,n,!0)},c.prototype.removeListener=function(e,t,n,r){var i=o?o+e:e;if(!this._events[i])return this;if(!t)return u(this,i),this;var a=this._events[i];if(a.fn)a.fn!==t||r&&!a.once||n&&a.context!==n||u(this,i);else{for(var s=0,c=[],l=a.length;s<l;s++)(a[s].fn!==t||r&&!a[s].once||n&&a[s].context!==n)&&c.push(a[s]);c.length?this._events[i]=1===c.length?c[0]:c:u(this,i)}return this},c.prototype.removeAllListeners=function(e){var t;return e?(t=o?o+e:e,this._events[t]&&u(this,t)):(this._events=new i,this._eventsCount=0),this},c.prototype.off=c.prototype.removeListener,c.prototype.addListener=c.prototype.on,c.prefixed=o,c.EventEmitter=c,e.exports=c},function(e,t,n){"use strict";function r(e){return Array.isArray(e)?e.map(encodeURIComponent).join(","):encodeURIComponent(String(e))}function o(e,t,n){if(!1===n||null===n)return e;var o=/\?/.test(e)?"&":"?",i=encodeURIComponent(t);return void 0!==n&&""!==n&&!0!==n&&(i+="="+r(n)),""+e+o+i}e.exports={appendQueryObject:function(e,t){if(!t)return e;var n=e;return Object.keys(t).forEach((function(e){var r=t[e];void 0!==r&&(Array.isArray(r)&&(r=r.filter((function(e){return!!e})).join(",")),n=o(n,e,r))})),n},appendQueryParam:o,prependOrigin:function(e,t){if(!t)return e;if("http"===e.slice(0,4))return e;var n="/"===e[0]?"":"/";return""+t.replace(/\/$/,"")+n+e},interpolateRouteParams:function(e,t){return t?e.replace(/\/:([a-zA-Z0-9]+)/g,(function(e,n){var o=t[n];if(void 0===o)throw new Error("Unspecified route parameter "+n);return"/"+r(o)})):e}}},function(e,t,n){"use strict";var r=n(45),o=n(8);function i(e){o.call(this,e)}i.prototype=Object.create(o.prototype),i.prototype.constructor=i,i.prototype.sendRequest=r.browserSend,i.prototype.abortRequest=r.browserAbort,e.exports=function(e){return new i(e)}},function(e,t,n){"use strict";var r=n(46),o=n(48),i=n(2),a=n(49),s={};function u(e){var t=e.total,n=e.loaded;return{total:t,transferred:n,percent:100*n/t}}function c(e,t){return new Promise((function(n,r){t.onprogress=function(t){e.emitter.emit(i.EVENT_PROGRESS_DOWNLOAD,u(t))};var a=e.file;a&&(t.upload.onprogress=function(t){e.emitter.emit(i.EVENT_PROGRESS_UPLOAD,u(t))}),t.onerror=function(e){r(e)},t.onabort=function(){var t=new o({request:e,type:i.ERROR_REQUEST_ABORTED});r(t)},t.onload=function(){if(delete s[e.id],t.status<200||t.status>=400){var i=new o({request:e,body:t.response,statusCode:t.status});r(i)}else n(t)};var c=e.body;"string"==typeof c?t.send(c):c?t.send(JSON.stringify(c)):a?t.send(a):t.send(),s[e.id]=t})).then((function(t){return function(e,t){return new r(e,{body:t.response,headers:a(t.getAllResponseHeaders()),statusCode:t.status})}(e,t)}))}function l(e,t){var n=e.url(t),r=new window.XMLHttpRequest;return r.open(e.method,n),Object.keys(e.headers).forEach((function(t){r.setRequestHeader(t,e.headers[t])})),r}e.exports={browserAbort:function(e){var t=s[e.id];t&&(t.abort(),delete s[e.id])},sendRequestXhr:c,browserSend:function(e){return Promise.resolve().then((function(){var t=l(e,e.client.accessToken);return c(e,t)}))},createRequestXhr:l}},function(e,t,n){"use strict";var r=n(47);function o(e,t){this.request=e,this.headers=t.headers,this.rawBody=t.body,this.statusCode=t.statusCode;try{this.body=JSON.parse(t.body||"{}")}catch(e){this.body=t.body}this.links=r(this.headers.link)}o.prototype.hasNextPage=function(){return!!this.links.next},o.prototype.nextPage=function(){return this.hasNextPage()?this.request._extend({path:this.links.next.url}):null},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return e?e.split(/,\s*</).reduce((function(e,t){var n=function(e){var t=e.match(/<?([^>]*)>(.*)/);if(!t)return null;var n=t[1],r=t[2].split(";"),o=null,i=r.reduce((function(e,t){var n=function(e){var t=e.match(/\s*(.+)\s*=\s*"?([^"]+)"?/);return t?{key:t[1],value:t[2]}:null}(t);return n?"rel"===n.key?(o||(o=n.value),e):(e[n.key]=n.value,e):e}),{});return o?{url:n,rel:o,params:i}:null}(t);return n?(n.rel.split(/\s+/).forEach((function(t){e[t]||(e[t]={url:n.url,params:n.params})})),e):e}),{}):{}}},function(e,t,n){"use strict";var r=n(2);e.exports=function(e){var t,n=e.type||r.ERROR_HTTP;if(e.body)try{t=JSON.parse(e.body)}catch(n){t=e.body}else t=null;var o=e.message||null;o||("string"==typeof t?o=t:t&&"string"==typeof t.message?o=t.message:n===r.ERROR_REQUEST_ABORTED&&(o="Request aborted")),this.message=o,this.type=n,this.statusCode=e.statusCode||null,this.request=e.request,this.body=t}},function(e,t,n){"use strict";e.exports=function(e){var t={};return e?(e.trim().split(/[\r|\n]+/).forEach((function(e){var n=function(e){var t=e.indexOf(":");return{name:e.substring(0,t).trim().toLowerCase(),value:e.substring(t+1).trim()}}(e);t[n.name]=n.value})),t):t}},function(e,t,n){"use strict";var r=n(10);e.exports=function(e){return r(e,(function(e,t){return null!=t}))}},function(e,t,n){"use strict";e.exports=function(e,t){return Object.keys(e).reduce((function(n,r){return n[r]=t(r,e[r]),n}),{})}},function(e,t,n){"use strict";n.r(t);n(19),n(29),n(31);var r=n(12),o=n.n(r),i={maxWalkDistance:.25,user:{longitude:null,latitude:null,address:null},origin:{longitude:null,latitude:null,address:null},destination:{longitude:null,latitude:null,address:null}},a=n(13),s=n.n(a),u=n(0),c=n(14),l=n.n(c),d={mapboxToken:"pk.eyJ1IjoidGVjaGllc2hhcmsiLCJhIjoiY2o5NmVpOTI1MDNxMjJ2cGJuZG44eTExOSJ9.K2lI3DUzNvAD3LAAtfwlBA",mapStyle:"mapbox://styles/techieshark/cj97690r00bcc2sthkqxn8f2v",stationsUrl:"https://lit-beach-21586.herokuapp.com/"};var f=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t=[];this.getStations=function(){return t},this.getStationsArray=function(){return t.features?t.features:[]};var n=function(){fetch(d.stationsUrl).then((function(e){return e.json()})).then((function(e){t=e}))};n(),window.setTimeout(n,3e4)};var p=n(15),h=n.n(p),m=n(16),g=n.n(m),v=h()({accessToken:d.mapboxToken});function b(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var y,w=d.stationsUrl;function x(e){return"stations-near-".concat(e)}function E(e,t){var n=x(t);return y.getLayer(n)?y.queryRenderedFeatures(e.point,{layers:[n]}):[]}function S(){y.on("click",(function(e){var t=y.queryRenderedFeatures(e.point,{layers:["stations-layer"]}),n=E(e,"origin"),r=E(e,"destination");if(n.length||r.length||t.length){var o,a=null;if(n.length)a="origin",o=b(n,1)[0];else if(r.length){a="destination",o=b(r,1)[0]}else{o=b(t,1)[0]}var s=function(e,t){var n,r,o=e.properties,a=o.stAddress1,s=o.latitude,u=o.longitude,c=o.availableBikes,l=o.availableDocks,d=o.statusValue,f={longitude:u,latitude:s},p="";"origin"===t?(n=i.origin,r=f,p="to"):"destination"===t?(n=f,r=i.destination,p="from"):(n=null,r=f);var h=function(e,t,n){var r=e?e.address||"".concat(e.latitude,",").concat(e.longitude):"",o=t?t.address||"".concat(t.latitude,",").concat(t.longitude):"",i="".concat("https://www.google.com/maps/dir","/").concat(r,"/").concat(o,"/@").concat(17,"/").concat("data=!4m2!4m1!3e2");return'<a rel="noopener noreferrer" target="_blank" href="'.concat(i,'">Directions ').concat(n," here</a>")}(n,r,p),m=function(e){return Number(e).toFixed(2)},g="Not In Service"===d?'<div class="station-popup--alert">'.concat(d,"</div>"):"";return'\n    <div class="station-popup">\n      <h3>'.concat(a,"</h3>\n      ").concat(g,'\n      <div class="columns station-popup--stats">\n        <div class="column station-popup--bikes">\n          <div class="station-popup--bikes-number">').concat(c,'</div>\n          <div class="station-popup--bikes-text">bikes</div>\n        </div>\n        <div class="column station-popup--docks">\n          <div class="station-popup--docks-number">').concat(l,'</div>\n          <div class="station-popup--docks-text">docks</div>\n        </div>\n      </div>\n      <div class="station-popup--directions">\n        ').concat(h,'\n      </div>\n      <div class="station-popup--coordinates">Lat/Long: <abbr title="').concat(s,", ").concat(u,'">').concat(m(s),", ").concat(m(u),"</abbr></div>\n    </div>")}(o,a);new mapboxgl.Popup({offset:[0,-15]}).setLngLat(o.geometry.coordinates).setHTML(s).setLngLat(o.geometry.coordinates).addTo(y)._container.classList.add("station-popup--container")}}))}function k(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:8;mapboxgl.accessToken=d.mapboxToken,(y=new mapboxgl.Map({container:"map",style:d.mapStyle,zoom:t,center:e})).on("load",(function(){var e={type:"FeatureCollection",features:[]};y.addSource("stations-near-origin",{type:"geojson",data:e,maxzoom:22}),y.addSource("stations-near-destination",{type:"geojson",data:e,maxzoom:22})})),y.on("load",(function(){window.setInterval((function(){y.getSource("stations-source").setData(f.getStations()),console.log("refetching live station data")}),3e4),y.addSource("stations-source",{type:"geojson",data:w}),y.addLayer({id:"stations-layer",type:"circle",source:"stations-source",paint:{"circle-radius":12,"circle-color":"#B42222","circle-opacity":0}}),y.on("mouseenter","stations-layer",(function(){y.getCanvas().style.cursor="pointer"})),y.on("mouseleave","stations-layer",(function(){y.getCanvas().style.cursor=""}))})),S()}var O={};function C(){["origin","destination"].forEach((function(e){if(i[e].latitude&&i[e].longitude){var t=function(e){if(0===i.maxWalkDistance)return{type:"FeatureCollection",features:[]};var t=f.getStationsArray();console.log("got all stations; searching within ".concat(i.maxWalkDistance),t);var n=Object(u.point)([i[e].longitude,i[e].latitude]),r=Object(u.featureCollection)([s()(n,i.maxWalkDistance,{units:"miles"})]),o=Object(u.featureCollection)(t);return l()(o,r)}(e);console.log("got stations near ".concat(e),t),function(e,t){console.log("showing stations nearby ".concat(e,": "),t);var n=x(e),r="origin"===e?"availableBikes":"availableDocks";console.log("adding matching nearby stations"),y.getSource(n).setData(t),y.getLayer(n)||y.addLayer({id:n,type:"circle",source:n,paint:{"circle-radius":12,"circle-color":{property:r,stops:[[0,"red"],[1,"lightseagreen"]]}}},"bikeshare-stations")}(e,t)}else!function(e){var t=x(e);y.getLayer(t)&&y.removeLayer(t)}(e)}))}function A(){var e,t,n;i.origin.latitude&&i.destination.latitude?(e=i.origin,t=i.destination,n=function(e){var t=y.getSource("route");t?t.setData(e):t=y.addSource("route",{type:"geojson",data:e});var n=x("origin");y.addLayer({id:"route",type:"line",source:"route",layout:{"line-join":"round","line-cap":"round"},paint:{"line-color":"#4AB2F7","line-width":8}},n)},v.getDirections({profile:"cycling",waypoints:[{coordinates:[e.longitude,e.latitude],waypointName:e.address},{coordinates:[t.longitude,t.latitude],waypointName:t.address}]}).send().then((function(e){var t=e.body;if("Ok"!==t.code)throw console.error(t),Error("Failed getting directions.");n(g.a.toGeoJSON(t.routes[0].geometry))})).catch((function(e){throw console.log("error fetching route: ",e),Error("Error while requesting directions.")}))):y.getLayer("route")&&y.removeLayer("route")}function N(e){A(),null===i[e].latitude&&O[e]?(console.log("clearing ".concat(e," marker (no latitude)")),O[e].remove(),O[e]=null):null!==i[e].latitude&&(function(e){if(O[e])O[e].setLngLat([i[e].longitude,i[e].latitude]);else{var t=document.createElement("div");t.className="marker map-marker-directions is-".concat(e),O[e]=new mapboxgl.Marker(t).setLngLat([i[e].longitude,i[e].latitude]).addTo(y)}}(e),function(e){y.flyTo({center:[i[e].longitude,i[e].latitude],zoom:14})}(e)),C()}var P=n(17),U=n.n(P)()({accessToken:d.mapboxToken}),j=null,T=null;function R(e,t){U.forwardGeocode({query:e,limit:5,bbox:T,proximity:j}).send().then((function(e){var n=e.body;t(null,n)}))}function q(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};i.user.latitude&&i.user.longitude&&function(e,t,n){U.reverseGeocode({query:[t,e],limit:2}).send().then((function(e){var t=e.body;n(null,t)}))}(i.user.latitude,i.user.longitude,(function(t,n){var r=n;"FeatureCollection"===r.type&&r.features&&r.features.length>0&&r.features[0].place_name&&(i.user.address=r.features[0].place_name),e(t,n,i.user.address)}))}function L(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function M(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?L(n,!0).forEach((function(t){F(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):L(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function F(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var _=n(18),D=n.n(_);function z(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var I=null;function B(e,t){if(t.place_name&&(i[e].address=t.place_name),t.center){var n=z(t.center,2);i[e].longitude=n[0],i[e].latitude=n[1]}}function V(e,t){document.getElementById(e).onchange=function(e){return function(t){var n=t.target.value;if(""===n)return i[e].longitude=null,i[e].latitude=null,i[e].address=null,void N(e);R(n,(function(t,r){if(t)console.log("error geocoding ".concat(n,": ").concat(t));else{if(I)console.log("we should not have run geocoder"),B(e,I.feature),I=null;else{var o=r;"FeatureCollection"===o.type&&o.features&&o.features.length>0&&B(e,o.features[0])}N(e)}}))}}(t),function(e,t){var n=document.getElementById(e);D()({input:document.getElementById(e),fetch:function(e,t){console.log("on fetch for input"),R(e,(function(n,r){if(n)console.log("error geocoding ".concat(e,": ").concat(n));else{var o=r;if("FeatureCollection"===o.type&&o.features&&o.features.length>0){var i=o.features.map((function(t){return{label:t.place_name,item:{feature:t,label:t.place_name,text:e}}}));t(i)}}}))},onSelect:function(e){I=e,console.log("SELECTED item:",e),n.value=e.feature.place_name,i[t].address=e.feature.properties.address||e.feature.place_name}})}(e,t)}function G(){var e,t,n,r;e=document.getElementById("directions--distance-range"),t={to:function(e){return 1===e?"":Number.isInteger(e)?e?"".concat(e," mi"):e:e%.5==0?e.toFixed(2):""}},o.a.create(e,{range:{min:[0],"100%":[2,2],max:[2]},start:i.maxWalkDistance,step:.25,connect:[!0,!1],pips:{mode:"count",values:3,density:12.5,format:t}}),e.noUiSlider.on("update",(function(e,t){var n=e[t];document.getElementById("directions--distance-value").innerText="".concat(Number(n).toFixed(2)," mi."),i.maxWalkDistance=parseFloat(n),C()})),document.getElementsByClassName("directions--locate-origin")[0].onclick=function(){var e=document.getElementById("originInput");e.value="Searching...",i.user.address?(e.value=i.user.address,i.origin=M({},i.user),N("origin")):(console.log("fetching your address..."),navigator.geolocation.getCurrentPosition((function(t){console.log(t);var n=t.coords,r=n.latitude,o=n.longitude;i.user.latitude=r,i.user.longitude=o,i.origin=M({},i.user),N("origin"),q((function(t,n,r){e.value=r,i.user.address=r,i.origin.address=r}))})))},V("originInput","origin"),V("destinationInput","destination"),n=document.getElementById("directions-toggle"),r=!0,n.onclick=function(){var e=document.getElementsByClassName("directions--content")[0];r?(n.style.width="".concat(e.clientWidth,"px"),e.style.display="none"):(n.style.width="100%",e.style.display="block"),r=!r,n.classList.toggle("shown"),n.classList.toggle("hidden")}}function H(e,t){var n;n=function(){k(e,t),G()},(document.attachEvent?"complete"===document.readyState:"loading"!==document.readyState)?n():document.addEventListener("DOMContentLoaded",n)}window.appState=i,function(){var e=this;console.log("initializing app");var t=37.611,n=-121.753,r=8;j=[n,t].slice(),T="-123.5337,36.8931,-121.2082,38.8643".split(",").map(parseFloat),Number.prototype.between=function(t,n){return e>t&&e<n};fetch("https://www.geoip-db.com/json/7afade10-d4ae-11e9-9885-d193dc4fb831").then((function(e){return e.json()})).then((function(e){var o=e.latitude,i=e.longitude,a=parseFloat(i),s=parseFloat(o);a.between(-124,-121)&&s.between(36.5,38.4)&&(t=s,n=a,r=11),H([n,t],r)})).catch((function(e){if(console.log("Error fetching location data: ".concat(e)),"Error: Coordinates must contain numbers"===e)throw e;H([n,t])}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,